name: Create Release and Upload Asset

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Prepare and Zip plugin files
        run: |
          set -euo pipefail

          # prepare tmp dir
          rm -rf tmp_release || true
          mkdir -p tmp_release

          # manifest and common root assets
          cp manifest.yaml tmp_release/manifest.yaml || true
          for f in README.md PRIVACY.md LICENSE requirements.txt; do
            [ -f "$f" ] && cp "$f" tmp_release/ || true
          done

          # provider: ensure root-level file named 'provider' (copy provider yaml to root provider file)
          if [ -f provider/heygen_dify_plugin.yaml ]; then
            cp provider/heygen_dify_plugin.yaml tmp_release/provider || true
          fi

          # tools: create root-level file 'tools' from tools/heygen_dify_plugin.yaml
          if [ -f tools/heygen_dify_plugin.yaml ]; then
            cp tools/heygen_dify_plugin.yaml tmp_release/tools || true
          fi

          # copy original tools directory as tools_dir to avoid name conflict
          if [ -d tools ]; then
            cp -r tools tmp_release/tools_dir || true
          fi

          # copy provider_files and assets if present
          [ -d provider_files ] && cp -r provider_files tmp_release/ || true
          [ -d _assets ] && cp -r _assets tmp_release/ || true
          [ -d assets ] && cp -r assets tmp_release/ || true

          # include difypkg if present
          [ -f heygen-dify-plugin.difypkg ] && cp heygen-dify-plugin.difypkg tmp_release/ || true

          # update temporary manifest to reference tools_dir and its entrypoint
          if [ -f tmp_release/manifest.yaml ]; then
            sed -i 's|tools/heygen_dify_plugin.yaml|tools_dir/heygen_dify_plugin.yaml|' tmp_release/manifest.yaml || true
            sed -i 's|entrypoint: tools/tool.py:HeyGenTool|entrypoint: tools_dir/tool.py:HeyGenTool|' tmp_release/manifest.yaml || true
          fi

          # zip the tmp_release contents (root-level files inside zip)
          (cd tmp_release && zip -r ../release.zip .) || true

      - name: Create Release and Upload Asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Extract tag name from the ref
          TAG_NAME=${GITHUB_REF#refs/tags/}

          # Create release and upload asset using GitHub CLI
          gh release create "$TAG_NAME" \
            --title "Release $TAG_NAME" \
            --generate-notes \
            ./release.zip
